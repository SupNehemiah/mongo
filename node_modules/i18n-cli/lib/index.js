'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sprintfJs = require('sprintf-js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function load(folder, locale) {
  // jshint ignore:line
  var file = _path2.default.join(folder, locale);
  return require(file);
}

var I18n = function () {
  function I18n(opts) {
    var _this = this;

    _classCallCheck(this, I18n);

    if (_typeof(opts.dict) == "object") {
      this.dict = opts.dict;
    } else if (opts.locale) {
      this.dict = load(opts.path, opts.locale);
    }

    // Support colors?
    this.colors_enable = typeof opts.colors != 'undefined' ? opts.colors : true;
    var supportsColor = opts.supportsColor || function () {
      return require('supports-color');
    };

    if (typeof supportsColor === 'function') {
      this.__defineGetter__('supportsColor', supportsColor);
    } else {
      this.supportsColor = supportsColor;
    }

    // Cache gets
    this.cache = {};
    this.template_cache = {};

    // Alias to translate
    this.t = function () {
      return _this.translate.apply(_this, arguments);
    };
  }

  _createClass(I18n, [{
    key: '_find',
    value: function _find(keys) {
      var buffer = this.dict || {};

      for (var i = 0; i < keys.length; i++) {
        buffer = buffer[keys[i]];
        if (!buffer) {
          break;
        }
      }

      return buffer;
    }
  }, {
    key: 'translate',
    value: function translate(key) {
      var result = this.cache[key];

      if (typeof result === 'undefined') {
        this.cache[key] = result = this._resolveKey(key);
      }

      if (result.value) {
        try {
          switch (_typeof(result.value)) {
            case "string":
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              return this._format.apply(this, [result].concat(args));
            case "object":
              return result.value;
            default:
              return key;
          }
        } catch (err) {
          var match,
              label = this.formatColors("${red}Translate error${reset}");
          match = err.toString().match(/Error: missing key (.*)/);
          if (match) {
            return label + (': \'' + key + '\', missing: ' + match[1]);
          }

          match = err.toString().match(/Error: format requires a mapping/);
          if (match) {
            return label + (': \'' + key + '\', missing a mappping');
          }

          throw err;
        }
      } else {
        return result.key;
      }
    }
  }, {
    key: '_resolveKey',
    value: function _resolveKey(key) {
      var keys = typeof key == "string" ? key.split('.') : key;
      var value = this._find(keys);

      // Search again, now ancestors is *
      if (!value) {
        var again_keys = new (Function.prototype.bind.apply(Array, [null].concat(_toConsumableArray(keys))))();
        again_keys[again_keys.length - 2] = '*';
        value = this._find(again_keys);
      }

      // Key to show in a error
      key = this.formatColors('${yellow}%s${yellow.close}', typeof key == "string" ? key : key.join("."));

      return { key: key, value: value };
    }
  }, {
    key: '_format',
    value: function _format(entry) {
      if (this.colors_enable) {
        if (!entry.builded) {
          entry.builded = this._build(entry.value);
        }
        entry = entry.builded(this.colors);
      } else {
        entry = entry.value;
      }

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return _sprintfJs.sprintf.apply(undefined, [entry].concat(args));
    }
  }, {
    key: 'formatColors',
    value: function formatColors(entry) {
      for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      return _sprintfJs.sprintf.apply(undefined, [this._build(entry)(this.colors)].concat(args));
    }
  }, {
    key: '_build',
    value: function _build(value) {
      var builded = this.template_cache[value];

      if (!builded) {
        if (!this._template) {
          this._template = require('lodash.template');
        }

        builded = this.template_cache[value] = this._template(value);
      }

      return builded;
    }
  }, {
    key: 'colors',
    get: function get() {
      return require(this.supportsColor ? './colors' : './no-colors');
    }
  }]);

  return I18n;
}();

// Support es6 and es5

I18n.I18n = I18n;
I18n.default = I18n;
module.exports = I18n;
//# sourceMappingURL=data:application/json;base64,
